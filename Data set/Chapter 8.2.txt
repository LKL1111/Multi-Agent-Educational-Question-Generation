8.2.2 Public Key Encryption
 
 For more than 2,000 years (since the time of the Caesar cipher and up to the 1970s), 
encrypted communication required that the two communicating parties share a com
mon secret¡ªthe symmetric key used for encryption and decryption. One difficulty 
with this approach is that the two parties must somehow agree on the shared key; 
but to do so requires (presumably secure) communication! Perhaps the parties could 
first meet and agree on the key in person (for example, two of Caesar¡¯s centurions 
might meet at the Roman baths) and thereafter communicate with encryption. In a 
networked world, however, communicating parties may never meet and may never 
converse except over the network. Is it possible for two parties to communicate with 
encryption without having a shared secret key that is known in advance? In 1976, 
Diffie and Hellman [Diffie 1976] demonstrated an algorithm (known now as Dif
fie-Hellman Key Exchange) to do just that¡ªa radically different and marvelously 
elegant approach toward secure communication that has led to the development of 
today¡¯s public key cryptography systems. We¡¯ll see shortly that public key cryptog
raphy systems also have several wonderful properties that make them useful not only 
 for encryption, but for authentication and digital signatures as well. Interestingly, it 
has recently come to light that ideas similar to those in [Diffie 1976] and [RSA 1978] 
had been independently developed in the early 1970s in a series of secret reports 
by researchers at the Communications-Electronics Security Group in the United 
Kingdom [Ellis 1987]. As is often the case, great ideas can spring up independently 
in many places; fortunately, public key advances took place not only in private, but 
also in the public view, as well.
 The use of public key cryptography is conceptually quite simple. Suppose Alice 
wants to communicate with Bob. As shown in Figure 8.6, rather than Bob and Alice 
sharing a single secret key (as in the case of symmetric key systems), Bob (the recipi
ent of Alice¡¯s messages) instead has two keys¡ªa public key that is available to 
everyone in the world (including Trudy the intruder) and a private key that is known 
only to Bob. We will use the notation K+ B and K-B to refer to Bob¡¯s public and pri
vate keys, respectively. In order to communicate with Bob, Alice first fetches Bob¡¯s 
public key. Alice then encrypts her message, m, to Bob using Bob¡¯s public key and 
a known (for example, standardized) encryption algorithm; that is, Alice computes 
K+ B(m). Bob receives Alice¡¯s encrypted message and uses his private key and a known 
(for example, standardized) decryption algorithm to decrypt Alice¡¯s encrypted mes
sage. That is, Bob computes K-B(K+ B(m)). We will see below that there are encryption/
 decryption algorithms and techniques for choosing public and private keys such that 
K-B(K+ B(m)) = m; that is, applying Bob¡¯s public key, K+ B, to a message, m (to get 
K+ B(m)), and then applying Bob¡¯s private key, K-B, to the encrypted version of m (that 
is, computing K-B(K+ B(m))) gives back m. This is a remarkable result! In this manner, 
Alice can use Bob¡¯s publicly available key to send a secret message to Bob without 
either of them having to distribute any secret keys! We will see shortly that we can 
interchange the public key and private key encryption and get the same remarkable 
result¨C¨Cthat is, K-B (B +(m)) = K+ B (K-B(m)) = m.
 The use of public key cryptography is thus conceptually simple. But two immedi
ate worries may spring to mind. A first concern is that although an intruder intercept
ing Alice¡¯s encrypted message will see only gibberish, the intruder knows both the 
key (Bob¡¯s public key, which is available for all the world to see) and the algorithm 
that Alice used for encryption. Trudy can thus mount a chosen-plaintext attack, using 
the known standardized encryption algorithm and Bob¡¯s publicly available encryption 
key to encode any message she chooses! Trudy might well try, for example, to encode 
messages, or parts of messages, that she suspects that Alice might send. Clearly, if 
public key cryptography is to work, key selection and encryption/decryption must be 
done in such a way that it is impossible (or at least so hard as to be nearly impossible) 
for an intruder to either determine Bob¡¯s private key or somehow otherwise decrypt 
or guess Alice¡¯s message to Bob. A second concern is that since Bob¡¯s encryption key 
is public, anyone can send an encrypted message to Bob, including Alice or someone 
claiming to be Alice. In the case of a single shared secret key, the fact that the sender 
knows the secret key implicitly identifies the sender to the receiver. In the case of 
public key cryptography, however, this is no longer the case since anyone can send 
an encrypted message to Bob using Bob¡¯s publicly available key. A digital signature, 
a topic we will study in Section 8.3, is needed to bind a sender to a message.
 RSA
 While there may be many algorithms that address these concerns, the RSA  algorithm 
(named after its founders, Ron Rivest, Adi Shamir, and Leonard Adleman) has 
become almost synonymous with public key cryptography. Let¡¯s first see how RSA 
works and then examine why it works.
 RSA makes extensive use of arithmetic operations using modulo-n arithmetic. 
So let¡¯s briefly review modular arithmetic. Recall that x mod n simply means the 
remainder of x when divided by n; so, for example, 19 mod 5 = 4. In modular arith
metic, one performs the usual operations of addition, multiplication, and exponen
tiation. However, the result of each operation is replaced by the integer remainder 
that is left when the result is divided by n. Adding and multiplying with modular 
arithmetic is facilitated with the following handy facts:
 [(a mod n) + (b mod n)] mod n = (a + b) mod n
 [(a mod n) - (b mod n)] mod n = (a - b) mod n
 [(a mod n) * (b mod n)] mod n = (a * b) mod n
 It follows from the third fact that (a mod n)d mod n = ad mod n, which is an identity 
that we will soon find very useful.
 Now suppose that Alice wants to send to Bob an RSA-encrypted message, as 
shown in Figure 8.6. In our discussion of RSA, let¡¯s always keep in mind that a mes
sage is nothing but a bit pattern, and every bit pattern can be uniquely represented by 
 an integer number (along with the length of the bit pattern). For example, suppose 
a message is the bit pattern 1001; this message can be represented by the decimal 
integer 9. Thus, when encrypting a message with RSA, it is equivalent to encrypting 
the unique integer number that represents the message.
 There are two interrelated components of RSA:
 ? The choice of the public key and the private key
 ? The encryption and decryption algorithm
 To generate the public and private RSA keys, Bob performs the following steps:
 1. Choose two large prime numbers, p and q. How large should p and q be? The 
larger the values, the more difficult it is to break RSA, but the longer it takes 
to perform the encoding and decoding. RSA Laboratories recommends that 
the product of p and q be on the order of 1,024 bits. For a discussion of how to 
find large prime numbers, see [Caldwell 2012].
 2. Compute n = pq and z = (p - 1)(q - 1).
 3. Choose a number, e, less than n, that has no common factors (other than 1) 
with z. (In this case, e and z are said to be relatively prime.) The letter e is used 
since this value will be used in encryption.
 4. Find a number, d, such that ed - 1 is exactly divisible (that is, with no  remainder) 
by z. The letter d is used because this value will be used in decryption. Put another 
way, given e, we choose d such that
 ed mod z = 1
 5. The public key that Bob makes available to the world, K+ B, is the pair of num
bers (n, e); his private key, K-B, is the pair of numbers (n, d).
 The encryption by Alice and the decryption by Bob are done as follows:
 ? Suppose Alice wants to send Bob a bit pattern represented by the integer num
ber m (with m 6 n). To encode, Alice performs the exponentiation me, and then 
computes the integer remainder when me is divided by n. In other words, the 
encrypted value, c, of Alice¡¯s plaintext message, m, is
 c = me mod n
 The bit pattern corresponding to this ciphertext c is sent to Bob.
 ? To decrypt the received ciphertext message, c, Bob computes
 m = cd mod n
 which requires the use of his private key (n, d).
 As a simple example of RSA, suppose Bob chooses p = 5 and q = 7.  (Admittedly, 
these values are far too small to be secure.) Then n = 35 and z = 24. Bob chooses 
e = 5, since 5 and 24 have no common factors. Finally, Bob chooses d = 29, since 
5*29-1 (that is, ed - 1) is exactly divisible by 24. Bob makes the two values, n = 35  
and e = 5, public and keeps the value d = 29 secret. Observing these two public 
values, suppose Alice now wants to send the letters l, o, v, and e to Bob. Interpreting 
each letter as a number between 1 and 26 (with a being 1, and z being 26), Alice and 
Bob perform the encryption and decryption shown in Tables 8.2 and 8.3, respectively. 
Note that in this example, we consider each of the four letters as a distinct message. 
A more realistic example would be to convert the four letters into their 8-bit ASCII 
representations and then encrypt the integer corresponding to the resulting 32-bit bit 
pattern. (Such a realistic example generates numbers that are much too long to print 
in a textbook!)
 Given that the ¡°toy¡± example in Tables 8.2 and 8.3 has already produced some 
extremely large numbers, and given that we saw earlier that p and q should each be 
several hundred bits long, several practical issues regarding RSA come to mind. 
How does one choose large prime numbers? How does one then choose e and d? 
How does one perform exponentiation with large numbers? A discussion of these 
important issues is beyond the scope of this book; see [Kaufman 1995] and the refer
ences therein for details
 Session Keys
 We note here that the exponentiation required by RSA is a rather time-consuming process. 
By contrast, DES is at least 100 times faster in software and between 1,000 and 10,000 
times faster in hardware [RSA Fast 2012]. As a result, RSA is often used in practice 
in combination with symmetric key cryptography. For example, if Alice wants to send 
Bob a large amount of encrypted data, she could do the following. First Alice chooses 
a key that will be used to encode the data itself; this key is referred to as a session key, 
and is denoted by KS. Alice must inform Bob of the session key, since this is the shared 
symmetric key they will use with a symmetric key cipher (e.g., with DES or AES). Alice 
encrypts the session key using Bob¡¯s public key, that is, computes c = (KS)e mod n. Bob 
receives the RSA-encrypted session key, c, and decrypts it to obtain the session key, KS. 
Bob now knows the session key that Alice will use for her encrypted data transfer.
 Why Does RSA Work?
 RSA encryption/decryption appears rather magical. Why should it be that by apply
ing the encryption algorithm and then the decryption algorithm, one recovers the 
original message? In order to understand why RSA works, again denote n = pq, 
where p and q are the large prime numbers used in the RSA algorithm.
 Recall that, under RSA encryption, a message (uniquely represented by an  integer), 
m, is exponentiated to the power e using modulo-n arithmetic, that is,
 c = me mod n
 Decryption is performed by raising this value to the power d, again using modulo-n 
arithmetic. The result of an encryption step followed by a decryption step is thus  
(me mod n)d mod n. Let¡¯s now see what we can say about this quantity. As mentioned 
earlier, one important property of modulo arithmetic is (a mod n)d mod n = ad mod n 
for any values a, n, and d. Thus, using a = me in this property, we have
 (me mod n)d mod n = med mod n
 It therefore remains to show that med mod n = m. Although we¡¯re trying to 
remove some of the magic about why RSA works, to establish this, we¡¯ll need to use a 
rather magical result from number theory here. Specifically, we¡¯ll need the result that 
says if p and q are prime, n = pq, and z = (p - 1)(q - 1), then xy mod n is the same as 
x(y mod z) mod n [Kaufman 1995]. Applying this result with x = m and y = ed we have
 med mod n = m(ed mod z) mod n
 But remember that we have chosen e and d such that ed mod z = 1. This gives us
 med mod n = m1 mod n = m
 which is exactly the result we are looking for! By first exponentiating to the power of 
e (that is, encrypting) and then exponentiating to the power of d (that is,  decrypting), 
we obtain the original value, m. Even more wonderful is the fact that if we first 
exponentiate to the power of d and then exponentiate to the power of e¡ªthat is, we 
reverse the order of encryption and decryption, performing the decryption operation 
first and then applying the encryption operation¡ªwe also obtain the original value, 
m. This wonderful result follows immediately from the modular arithmetic:
 (md mod n)e mod n = mde mod n = med mod n = (me mod n)d mod n
 The security of RSA relies on the fact that there are no known algorithms for 
quickly factoring a number, in this case the public value n, into the primes p and q. If 
one knew p and q, then given the public value e, one could easily compute the secret 
key, d. On the other hand, it is not known whether or not there exist fast algorithms 
for factoring a number, and in this sense, the security of RSA is not guaranteed.
 Another popular public-key encryption algorithm is the Diffie-Hellman algo
rithm, which we will briefly explore in the homework problems. Diffie-Hellman 
is not as versatile as RSA in that it cannot be used to encrypt messages of arbitrary 
length; it can be used, however, to establish a symmetric session key, which is in turn 
used to encrypt messages.